geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method = "lm", se = FALSE, formula = smooth_form3, colour = "red") +
theme_minimal() + coord_flip() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(depth, vol)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
#geom_smooth(method = "lm", se = FALSE, formula = smooth_form3, colour = "red") +
theme_minimal() + coord_flip() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(depth, vol)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, color="red") +
#formula = smooth_form3,
theme_minimal() + coord_flip() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(depth, vol)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="loess", se=FALSE, color="red") +
#formula = smooth_form3,
theme_minimal() + coord_flip() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(depth, vol)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="loess", se=FALSE, formula=y ~ x,  color="red") +
#formula = smooth_form3,
theme_minimal() + coord_flip() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(depth, vol)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ x,  color="red") +
#formula = smooth_form3,
theme_minimal() + coord_flip() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(depth, vol)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3),  color="red") +
#formula = smooth_form3,
theme_minimal() + coord_flip() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(depth, vol)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3),  color="red") +
theme_minimal() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3),  color="red") +
theme_minimal() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,2), color="red") +
theme_minimal() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,2), color="red", fullrange=T) +
theme_minimal() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,2), color="red", fullrange=T) +
theme_minimal() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3), color="red", fullrange=T) +
theme_minimal() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3,raw=T), color="red", fullrange=T) +
theme_minimal() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=T, formula=y ~ poly(x,3,raw=T), color="red", fullrange=T) +
theme_minimal() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3,raw=T), color="red", fullrange=T) +
theme_minimal() + theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3,raw=T), color="red", fullrange=T) +
theme(legend.position="none") +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3,raw=T), color="red", fullrange=T) +
theme_minimal() +
ggtitle("Pond Curve")
g3
g2
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3,raw=T), color="red", fullrange=T) +
theme_minimal() +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=y ~ poly(x,3,raw=F), color="red", fullrange=T) +
theme_minimal() +
ggtitle("Pond Curve")
g3
smooth_form <- y ~ poly(x,3,raw=F)
smooth_form <- y ~ -1 + x + I(x^2)
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="lm", se=FALSE, formula=smooth_form, color="red", fullrange=T) +
theme_minimal() +
ggtitle("Pond Curve")
g3
g3 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method="gam", se=FALSE, formula=smooth_form, color="red", fullrange=T) +
theme_minimal() +
ggtitle("Pond Curve")
g3
?spline
spline_int <- as.data.frame(spline(df4$vol, df4$depth))
##################
df4 <- data.frame(vol=pond_data_df$totVol, depth=pond_data_df$depth)
spline_int <- as.data.frame(spline(df4$vol, df4$depth))
g4 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
# geom_smooth(method="gam", se=FALSE, formula=smooth_form, color="red", fullrange=T) +
geom_line(data=splint_int, aes(x=x, y=y)) +
theme_minimal() +
ggtitle("Pond Curve")
spline_int <- as.data.frame(spline(df4$vol, df4$depth))
g4 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
# geom_smooth(method="gam", se=FALSE, formula=smooth_form, color="red", fullrange=T) +
geom_line(data=splint_int, aes(x=x, y=y)) +
theme_minimal() +
ggtitle("Pond Curve")
g4 <- ggplot(df3, aes(vol, depth)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
# geom_smooth(method="gam", se=FALSE, formula=smooth_form, color="red", fullrange=T) +
geom_line(data=spline_int, aes(x=x, y=y)) +
theme_minimal() +
ggtitle("Pond Curve")
g4
#########################################
df2a <- data.frame(x=pond_data_df$depth, y=pond_data_df$totVol)
smooth_formula <- y ~ poly(x, 3, raw = TRUE)
smooth_frm2a <- y ~ poly(x, 3, raw = TRUE)
#########################################
df2a <- data.frame(x=pond_data_df$depth, y=pond_data_df$totVol)
smooth_frm2a <- y ~ poly(x, 3, raw = TRUE)
g2a <- ggplot(df2a, aes(x, y)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method = "lm", se=FALSE, formula = smooth_frm2a, color = "red") +
theme_minimal() + coord_flip() + theme(legend.position="none") + ggtitle("Pond Curve") +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
labs(x="Pond Depth (ft)", y = "Volume at Depth (Acre-ft)") # +
g2a
g2a <- ggplot(df2a, aes(x, y)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method = "lm", se=FALSE, formula = smooth_frm2a, color = "red") +
theme_minimal() + coord_flip() + theme(legend.position="none") + ggtitle("Pond Curve") +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
labs(x="depth (Ft)", y = "pond volume (Acre-ft)") # +
g2a
ggplotly(g2a)
?ggplotly
g2a <- ggplot(df2a, aes(x, y)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method = "lm", se=FALSE, formula = smooth_frm2a, color = "red") +
theme_minimal() + theme(legend.position="none") + ggtitle("Pond Curve") +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
labs(x="depth (Ft)", y = "pond volume (Acre-ft)") # +
g2a
ggplotly(g2a)
g2a <- ggplot(df2a, aes(x, y)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
coord_flip() +
geom_smooth(method = "lm", se=FALSE, formula = smooth_frm2a, color = "red") +
theme_minimal() + theme(legend.position="none") + ggtitle("Pond Curve") +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
labs(x="depth (Ft)", y = "pond volume (Acre-ft)") # +
g2a
ggplotly(g2a)
x <- geom_smooth(data=df2a, method="lm", se=FALSE, formula = smooth_frm2a, color = "red")
x
g2a <- ggplot(df2a, aes(x, y)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
coord_flip() + scale_y_reverse() +
geom_smooth(method = "lm", se=FALSE, formula = smooth_frm2a, color = "red") +
theme_minimal() + theme(legend.position="none") + ggtitle("Pond Curve") +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
labs(x="depth (Ft)", y = "pond volume (Acre-ft)") # +
g2a
g2a <- ggplot(df2a, aes(x, y)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
coord_flip() + scale_x_reverse() +
geom_smooth(method = "lm", se=FALSE, formula = smooth_frm2a, color = "red") +
theme_minimal() + theme(legend.position="none") + ggtitle("Pond Curve") +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
labs(x="depth (Ft)", y = "pond volume (Acre-ft)") # +
g2a
ggplotly(g2a)
runmean
g2a <- ggplot(df2a, aes(x, y)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method = "lm", se=FALSE, formula = smooth_frm2a, color = "red") +
coord_flip() + scale_x_reverse() +
theme_minimal() + theme(legend.position="none") + ggtitle("Pond Curve") +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
labs(x="depth (Ft)", y = "pond volume (Acre-ft)") # +
g2a
ggplotly(g2a)
x <- geom_smooth(data=df2a, method="lm", se=FALSE, formula = smooth_frm2a, color = "red")
str(x)
df2a
x <- df2a$x; y=df2a$y
lm1 <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + ...)
lm1 <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
plot(lm1)
lm1 <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
plot(lm1, type="l")
plot(lm1)
x
y
plot(x,y)
lm2 <- lm(y ~ poly(x,3))
summary(lm2)
x_vals <- seq(from=min(x), to=max(x), length.out=100)
x_vals
y_vals_mod <- predict(lm2, data.frame(x=x_vals))
y_vals_mod
lines(xvals,yvals)
xvals <- seq(from=min(x), to=max(x), length.out=100)
yvals_mod <- predict(lm2, data.frame(x=x_vals))
lines(xvals,yvals_mod)
?lm
regress_mod <- lm(volm ~ poly(depth,3), data=df2a)
pond_data_df
regress_mod <- lm(vol ~ poly(depth,3), data=pond_data_df)
regr_xs <- with(pond_data_df, seq(from=min(depth), to=max(depth), length.out=100))
regr_xs
regr_ys <- predict(regr_mod, regr_xs)
regr_mod <- lm(vol ~ poly(depth,3), data=pond_data_df)
regr_xs <- with(pond_data_df, seq(from=min(depth), to=max(depth), length.out=100))
regr_ys <- predict(regr_mod, regr_xs)
?predict
regr_ys <- predict(regr_mod, newdata=data.frame(regr_xs))
regr_mod <- lm(vol ~ poly(depth,3), data=pond_data_df)
regr_xs <- with(pond_data_df, seq(from=min(depth), to=max(depth), length.out=100))
regr_ys <- predict(regr_mod, newdata=data.frame(regr_xs))
names(pond_data_df)
regr_ys <- predict(regr_mod, newdata=data.frame(depth=regr_xs))
plot(pond_data_df$depth, pond_data_df$vol)
pond_data_df
demo_data_df <- read_excel(file.path("C:/GitHub/PondCalc/PondCalculator/PondCalc", "PondCalc_SampleData.xlsx"))
pond_data_df <- add_vol(demo_data_df)
regr_mod <- lm(vol ~ poly(depth,3), data=pond_data_df)
regr_xs <- with(pond_data_df, seq(from=min(depth), to=max(depth), length.out=100))
regr_ys <- predict(regr_mod, newdata=data.frame(depth=regr_xs))
plot(pond_data_df$depth, pond_data_df$vol)
regr_mod <- lm(totVol ~ poly(depth,3), data=pond_data_df)
regr_xs <- with(pond_data_df, seq(from=min(depth), to=max(depth), length.out=100))
regr_ys <- predict(regr_mod, newdata=data.frame(depth=regr_xs))
plot(pond_data_df$depth, pond_data_df$totVol)
lines(regr_xs, regr_ys)
runApp()
runApp()
runApp()
runApp()
?geom_line
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplotly)
library(plotly)
?ggplotly
runApp()
?renderPlotly
runApp()
runApp()
?ggplotly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pond_data_df
runApp()
runApp()
runApp()
x <- pond_data_df
x
library(dplyr)
caTools::runmean()
?caTools::runmean
x
x %>% mutate(half_sr=sqrt(totVal))
x %>% mutate(half_sr=sqrt(totVol))
x %>% mutate(half_sr=sqrt(totVol) / 2)
x %>% arrange(desc(depth)) %>%  mutate(half_sr=sqrt(totVol) / 2)
?lag
x %>% arrange(desc(depth)) %>%  mutate(half_sr=sqrt(totVol) / 2) %>%  mutate(nextd=lag(depth))
x %>% arrange(desc(depth)) %>%  mutate(half_sr=sqrt(totVol) / 2) %>%  mutate(nextd=lead(depth))
x %>% arrange(desc(depth)) %>%  mutate(half_sr=sqrt(totVol) / 2) %>%  mutate(nextd=lead(depth), next_rad=lead(area_rad))
x %>% arrange(desc(depth)) %>%  mutate(arearad=sqrt(totVol) / 2) %>%  mutate(nextd=lead(depth), next_arearad=lead(arearad))
x %>% arrange(desc(depth)) %>%  mutate(arearad=sqrt(totVol) / 2) %>%  mutate(nextd=lead(depth), next_arearad=lead(arearad)) %>% select(depth, arearad, nextd, next_aread)
x %>% arrange(desc(depth)) %>%  mutate(arearad=sqrt(totVol) / 2) %>%  mutate(nextd=lead(depth), next_arearad=lead(arearad)) %>% select(depth, arearad, nextd, next_arearad)
x %>% arrange(desc(depth)) %>% rename(d1=depth) %>%  mutate(r1=sqrt(totVol) / 2) %>%  mutate(d2=lead(d1), r2=lead(r1)) %>% select(d1, r1, d2, r2)
x %>% arrange(desc(depth)) %>% rename(d1=depth) %>%  mutate(r1=sqrt(totVol) / 2) %>%  mutate(d2=lead(d1), r2=lead(r1)) %>% select(d1, r1, d2, r2)
?geom_polygon
ids <- factor(c("1.1", "2.1", "1.2", "2.2", "1.3", "2.3"))
values <- data.frame(
id = ids,
value = c(3, 3.1, 3.1, 3.2, 3.15, 3.5)
)
positions <- data.frame(
id = rep(ids, each = 4),
x = c(2, 1, 1.1, 2.2, 1, 0, 0.3, 1.1, 2.2, 1.1, 1.2, 2.5, 1.1, 0.3,
0.5, 1.2, 2.5, 1.2, 1.3, 2.7, 1.2, 0.5, 0.6, 1.3),
y = c(-0.5, 0, 1, 0.5, 0, 0.5, 1.5, 1, 0.5, 1, 2.1, 1.7, 1, 1.5,
2.2, 2.1, 1.7, 2.1, 3.2, 2.8, 2.1, 2.2, 3.3, 3.2)
)
# Currently we need to manually merge the two together
datapoly <- merge(values, positions, by = c("id"))
datapoly
ggplot(datapoly, aes(x = x, y = y)) +  geom_polygon(aes(fill = value, group = id))
x %>% arrange(desc(depth)) %>% rename(d1=depth) %>%  mutate(r1=sqrt(totVol) / 2) %>%  mutate(d2=lead(d1), r2=lead(r1)) %>% select(d1, r1, d2, r2)
node_src <- x[i,]
i <- i
node_src <- x[i,]
i <- 1
node_src <- x[i,]
node_src
x <- x %>% arrange(desc(depth)) %>% rename(d1=depth) %>%  mutate(r1=sqrt(totVol) / 2) %>%  mutate(d2=lead(d1), r2=lead(r1)) %>% select(d1, r1, d2, r2)
i <- 1
2 <- x[i,]
x <- x %>% arrange(desc(depth)) %>% rename(d1=depth) %>%  mutate(r1=sqrt(totVol) / 2) %>%  mutate(d2=lead(d1), r2=lead(r1)) %>% select(d1, r1, d2, r2)
pond_data_df
x <- pond_data_df
x <- pond_data_df %>% arrange(desc(depth)) %>% rename(d1=depth) %>%  mutate(r1=sqrt(totVol) / 2) %>%  mutate(d2=lead(d1), r2=lead(r1)) %>% select(d1, r1, d2, r2)
x
x
i <- 1
x2 <- x[i,]
(x2 <- x[i,])
x2[c(1,2)]
(x2 <- x[i,,drop=TRUE])
x2 %*% c(1,1,1,1)
(x2 <- as.matrix(x[i,,drop=TRUE]))
x2 %*% c(1,1,1,1)
x2
p1 <- c(x2$d1,x2$r1)
(x2 <- as.matrix(x[i,,drop=TRUE]))
(x2 <- x[i,])
p1 <- c(x2$d1,x2$r1)
(p1 <- c(x2$d1,x2$r1))
(p1 <- c(x2$d1,x2$r1))
(p2 <- c(x2$d2,x2$r2))
(p3 <- c(x2$d2,-x2$r2))
(p4 <- c(x2$d1,-x2$r2))
polyi <- rbind(p1,p2,p3,p4)
polyi
x
pond_layers <- NULL
(poly_xs <- c(x2$r1, x2$r2, -x2$r2, -x2$r1, x2$r1))
(my_poly <- data.frame(x=poly_xs, y=poly_ys))
(poly_xs <- c(x2$r1, x2$r2, -x2$r2, -x2$r1, x2$r1))
(poly_ys <- c(x2$d1, x2$d2, x2$d2, x2$d1, x2$d1))
(my_poly <- data.frame(x=poly_xs, y=poly_ys))
plot(my_poly)
i
pond_data_df
trap_coords_wide <- pond_data_df %>% arrange(desc(depth)) %>% rename(d1=depth) %>%  mutate(r1=sqrt(totVol) / 2) %>%  mutate(d2=lead(d1), r2=lead(r1)) %>% select(d1, r1, d2, r2)
trap_coords_wide
with(pond_data_df[i,], c(r1, r2, -$r2, -r1, r1))
i <- 1
xs <- with(pond_data_df[i,], c(r1, r2, -$r2, -r1, r1))
xs <- with(pond_data_df[i,], c(d1, d2, d2, d1, d1))
pond_data_df
xs <- with(trap_coords_wide[i,], c(r1, r2, -$r2, -r1, r1))
xs <- with(trap_coords_wide[i,], c(r1, r2, -r2, -r1, r1))
ys <- with(trap_coords_wide[i,], c(d1, d2, d2, d1, d1))
one_trap <- data.frame(x=xs,y=ys)
polygon(one_trap)
trap_coords_long <- NULL
for (i in 1:nrow(trap_coords_wide)) {
xs <- with(trap_coords_wide[i,], c(r1, r2, -r2, -r1, r1))
ys <- with(trap_coords_wide[i,], c(d1, d2, d2, d1, d1))
one_trap_df <- data.frame(id=i, x=xs,y=ys)
polygon(one_trap)
trap_coords_long <- rbind(trap_coords_long, one_trap_df)
}
trap_coords_long
trap_coords_long <- NULL
for (i in 1:nrow(trap_coords_wide)-1) {
xs <- with(trap_coords_wide[i,], c(r1, r2, -r2, -r1, r1))
ys <- with(trap_coords_wide[i,], c(d1, d2, d2, d1, d1))
one_trap_df <- data.frame(id=i, x=xs,y=ys)
polygon(one_trap)
trap_coords_long <- rbind(trap_coords_long, one_trap_df)
}
for (i in 1:(nrow(trap_coords_wide)-1)) {
xs <- with(trap_coords_wide[i,], c(r1, r2, -r2, -r1, r1))
ys <- with(trap_coords_wide[i,], c(d1, d2, d2, d1, d1))
one_trap_df <- data.frame(id=i, x=xs,y=ys)
polygon(one_trap)
trap_coords_long <- rbind(trap_coords_long, one_trap_df)
}
trap_coords_long
trap_coords_df <- NULL
ggplot(trap_coords_df, aes(x=x, y=y)) %>% geom_polygon()
ggplot(trap_coords_df, aes(x=x, y=y)) + geom_polygon()
trap_coords_df
trap_coords_df <- NULL
for (i in 1:(nrow(trap_coords_wide)-1)) {
xs <- with(trap_coords_wide[i,], c(r1, r2, -r2, -r1, r1))
ys <- with(trap_coords_wide[i,], c(d1, d2, d2, d1, d1))
one_trap_df <- data.frame(id=i, x=xs,y=ys)
trap_coords_df <- rbind(trap_coords_df, one_trap_df)
}
trap_coords_df
ggplot(trap_coords_df, aes(x=x, y=y)) + geom_polygon()
ggplot(trap_coords_df, aes(x=x, y=y, group=id)) + geom_polygon()
ggplot(trap_coords_df, aes(x=x, y=y, group=id, color=id)) + geom_polygon()
ggplot(trap_coords_df, aes(x=x, y=y)) + geom_polygon(aes(group=id, fill=id))
runApp()
pond_data_df
trap_coords_wide <- pond_data_df %>% arrange(desc(depth)) %>% rename(d1=depth) %>% mutate(r1=sqrt(area) / 2) %>%  mutate(d2=lead(d1), r2=lead(r1)) %>% select(d1, r1, d2, r2)
trap_coords_wide
trap_coords_df <- NULL
for (i in 1:(nrow(trap_coords_wide)-1)) {
xs <- with(trap_coords_wide[i,], c(r1, r2, -r2, -r1, r1))
ys <- with(trap_coords_wide[i,], c(d1, d2, d2, d1, d1))
one_trap_df <- data.frame(id=i, x=xs,y=ys)
trap_coords_df <- rbind(trap_coords_df, one_trap_df)
}
trap_coords_df
ggplot(trap_coords_df, aes(x=x, y=y)) + geom_polygon(aes(group=id, fill=id) )
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?strong
runApp()
runApp()
runApp()
runApp()
h5("Introduction")
runApp()
runApp()
h5("Introduction")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
xx <- "hello.xlsx"
grep(x, "xlsx$")
grep(xx, "xlsx$")
grep("xlsx$", xx)
grepl("xlsx$", xx)
grepl("xls$", xx)
runApp()
runApp()
runApp()
shiny::runApp('PondCalc')
runApp('PondCalc')
