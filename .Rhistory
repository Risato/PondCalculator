breaks <- input$breaks
if (breaks == "custom") {
breaks <- input$breakCount
}
hist(x, breaks = breaks)
}
})
}
##### USER INTERFACE ----
# initiating the UI
ui <- navbarPage( "Conclave Event Registration",
tabPanel("Event Registration", htmlOutput("googleForm")),
tabPanel("Verify Registration", DT::dataTableOutput("googleFormData"), actionButton("refresh", "Refresh Sheet"),
downloadButton("downloadRegistration", "Download Current Registration")
),
tabPanel("Schedule Events",
selectInput("scheduleInput",
"Select Which Registration Sheet to Use",
c('Existing Google Form' = "existing", 'Custom Input' = "custom")
),
conditionalPanel(
downloadButton("downlosadData", "Download Blank Registration Template"),
condition = "input.scheduleInput == 'custom'",
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
),
numericInput("obs", "Heats/Event:", 4, min = 1, max = 8),
verbatimTextOutput("value"),
actionButton("button", "Generate Schedule")
),
tabPanel("Calculate Scores",
# Select which data source to use
h2("Step 2:"),
selectInput("registrationType", "Upload/Select Final Competitor List:",
c(Google_Form = "scatter", Custom = "custom")
),
# Only show this panel if the plot type is a histogram
conditionalPanel(
condition = "input.registrationType == 'custom'",
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
),
# Button
downloadButton("downloadData", "Download")
),
mainPanel(
# plotOutput("plot")
)
)
shinyApp(ui, server)
library(shiny)
library(DT)
library(dplyr)
library(googlesheets)
library(shinythemes)
ui <- (fluidPage(
theme = shinytheme("flatly"),
titlePanel("Embed a Google Form"),
sidebarLayout(
sidebarPanel(
h6(a("Click Here to See Code on Github",
href="https://github.com/jennybc/googlesheets/tree/master/inst/shiny-examples/04_embedded-google-form",
target="_blank")),
htmlOutput("googleForm")
),
mainPanel(
DT::dataTableOutput("googleFormData"),
actionButton("refresh", "Refresh Sheet")
)
)
)
)
#<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSeJmQXdP8wj391meoTIyWNL-KeVTmh_nmo3YkulVfd34XM_vA/viewform?embedded=true" width="700" height="520" frameborder="0" marginheight="0" marginwidth="0">Loading...</iframe>
## ======================
googleform_embed_link <- "https://docs.google.com/forms/d/1nHVBMG24OPij25hSTbL9BMYTGRIfYDC4mg3NIsZXTmg/viewform?embedded=true"
googleform_data_url <- "https://docs.google.com/spreadsheets/d/1K5g_3bxsE33T4ZuwUfxmzGY5RXNvQAAP78vis1EHFps/pubhtml"
## ======================
server <- server(function(input, output, session) {
ss <- gs_url(googleform_data_url, lookup = FALSE, visibility = "public")
output$googleForm <- renderUI({
tags$iframe(id = "googleform",
src = googleform_embed_link,
width = 400,
height = 625,
frameborder = 0,
marginheight = 0)
})
output$googleFormData <- DT::renderDataTable({
input$refresh
ss_dat <- gs_read(ss) %>%
mutate(Timestamp = Timestamp %>%
as.POSIXct(format = "%m/%d/%Y %H:%M:%S", tz = "PST8PDT")) %>%
select(Timestamp, Name, Age = `How old are you?`) %>%
arrange(desc(Timestamp))
DT::datatable(ss_dat)
})
})
# Run the application
shinyApp(ui = ui, server = server)
library(readxl)
library(dplyr)
# Import LDSF Data
treedata <- read_excel("C:/Users/RisatoMob/Desktop/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
voltable <- read_excel("C:/Users/RisatoMob/Desktop/LDSF_Vol_Table.xlsx")
voltable
# Remove USFS Control Data
data<- filter(treedata, comp != "Fscontrol" , comp != "FScontrol")
data
# Calculate BA/Acre per tree
data$BA = data$dbh^2*0.005454
data$BAperAcre = data$BA*10
Current = aggregate(data$BAperAcre, list(plot = data$plot, comp = data$comp), FUN =sum)
colnames(Current)[colnames(Current) == 'x'] <- 'CurrentBA'
Current = aggregate(CurrentBA ~ comp, Current, mean)
#Summarize total BA removed
table(treedata$harvest)
cut = filter(data, harvest == "Y")
Removed = aggregate(cut$BAperAcre, list(plot = cut$plot, comp = cut$comp), FUN =sum)
colnames(Removed)[colnames(Removed) == 'x'] <- 'RemovedBA'
Removed = aggregate(RemovedBA ~ comp, Removed, mean)
# Summarize total Ba remaining
keep = filter(data, is.na(harvest))
Residual = aggregate(keep$BAperAcre, list(plot = keep$plot, comp = keep$comp), FUN =sum)
colnames(Residual)[colnames(Residual) == 'x'] <- 'ResidualBA'
Residual = aggregate(ResidualBA ~ comp, Residual, mean)
# Combine summaries
temp <- merge(Residual, Removed, "comp", all = TRUE)
total <- merge(Current, temp, "comp", all = TRUE)
total
# Import LDSF Data
treedata <- read_excel("C:/Users/RisatoMob/Desktop/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
library(readxl)
library(dplyr)
# Import LDSF Data
treedata <- read_excel("C:/Users/RisatoMob/Desktop/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
# Import LDSF Data
treedata <- read_excel("C:/Users/RisatoMob/Desktop/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
# Import LDSF Data
treedata <- read_excel("C:/Users/RisatoMob/Desktop/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
# Import LDSF Data
treedata <- read_excel("C:\Users\RisatoMob\Desktop\Dropbox\Silviculture for Climate Change Study Data\LaTour Data/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
library(readxl)
library(dplyr)
# Import LDSF Data
treedata <- read_excel("C:/Users/RisatoMob/Desktop/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
voltable <- read_excel("C:/Users/RisatoMob/Desktop/LDSF_Vol_Table.xlsx")
# Import LDSF Data
treedata <- read_excel("C:/Users/RisatoMob/Desktop/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
voltable <- read_excel("C:/Users/RisatoMob/Desktop/LDSF_Vol_Table.xlsx")
voltable <- read_excel("C:/Users/RisatoMob/Desktop/LSDF_Vol_Table.xlsx")
voltable
# Remove USFS Control Data
data<- filter(treedata, comp != "Fscontrol" , comp != "FScontrol")
data
# Calculate BA/Acre per tree
data$BA = data$dbh^2*0.005454
data$BAperAcre = data$BA*10
Current = aggregate(data$BAperAcre, list(plot = data$plot, comp = data$comp), FUN =sum)
colnames(Current)[colnames(Current) == 'x'] <- 'CurrentBA'
Current = aggregate(CurrentBA ~ comp, Current, mean)
#Summarize total BA removed
table(treedata$harvest)
cut = filter(data, harvest == "Y")
Removed = aggregate(cut$BAperAcre, list(plot = cut$plot, comp = cut$comp), FUN =sum)
colnames(Removed)[colnames(Removed) == 'x'] <- 'RemovedBA'
Removed = aggregate(RemovedBA ~ comp, Removed, mean)
# Summarize total Ba remaining
keep = filter(data, is.na(harvest))
Residual = aggregate(keep$BAperAcre, list(plot = keep$plot, comp = keep$comp), FUN =sum)
colnames(Residual)[colnames(Residual) == 'x'] <- 'ResidualBA'
Residual = aggregate(ResidualBA ~ comp, Residual, mean)
# Combine summaries
temp <- merge(Residual, Removed, "comp", all = TRUE)
library(readxl)
library(dplyr)
# Import LDSF Data
treedata <- read_excel("C:/Users/RisatoMob/Desktop/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
voltable <- read_excel("C:/Users/RisatoMob/Desktop/LDSF_Vol_Table.xlsx")
voltable
# Remove USFS Control Data
data<- filter(treedata, comp != "Fscontrol" , comp != "FScontrol")
data
# Calculate BA/Acre per tree
data$BA = data$dbh^2*0.005454
data$BAperAcre = data$BA*10
Current = aggregate(data$BAperAcre, list(plot = data$plot, comp = data$comp), FUN =sum)
colnames(Current)[colnames(Current) == 'x'] <- 'CurrentBA'
Current = aggregate(CurrentBA ~ comp, Current, mean)
current
Current
data
data$dbh<8
data(data$dbh<8)
data[data$dbh<8]
data
data[data$dbh<=8]
data$dbh
source('C:/Users/RisatoMob/Desktop/Dropbox/Silviculture for Climate Change Study Data/LaTour Data/LDSF_Inventory.R', echo=TRUE)
data[data$dbh<=8.0]
data$dbh
data$dbh>8
data[data$dbh>8]
data(data$dbh<=8.0)
data(data$dbh)<=8
data[(data$dbh)<=8]
data$%dbh <- data[data$dbh>8]
data$DBH <- data[data$dbh>8]
data$DBH <- data[data$dbh>8]
library(readxl)
library(dplyr)
# Import LDSF Data
treedata <- read_excel("C:/Users/RisatoMob/Desktop/All_Plots_LaTour_Data_OLM_10.11.18.xlsx", sheet = "tree_inventory")
voltable <- read_excel("C:/Users/RisatoMob/Desktop/LDSF_Vol_Table.xlsx")
voltable
# Remove USFS Control Data
data<- filter(treedata, comp != "Fscontrol" , comp != "FScontrol")
data
# Calculate BA/Acre per tree
data$BA = data$dbh^2*0.005454
data$BAperAcre = data$BA*10
Current = aggregate(data$BAperAcre, list(plot = data$plot, comp = data$comp), FUN =sum)
colnames(Current)[colnames(Current) == 'x'] <- 'CurrentBA'
Current = aggregate(CurrentBA ~ comp, Current, mean)
Current
#Summarize total BA removed
table(treedata$harvest)
cut = filter(data, harvest == "Y")
Removed = aggregate(cut$BAperAcre, list(plot = cut$plot, comp = cut$comp), FUN =sum)
colnames(Removed)[colnames(Removed) == 'x'] <- 'RemovedBA'
Removed = aggregate(RemovedBA ~ comp, Removed, mean)
# Summarize total Ba remaining
keep = filter(data, is.na(harvest))
Residual = aggregate(keep$BAperAcre, list(plot = keep$plot, comp = keep$comp), FUN =sum)
colnames(Residual)[colnames(Residual) == 'x'] <- 'ResidualBA'
Residual = aggregate(ResidualBA ~ comp, Residual, mean)
# Combine summaries
temp <- merge(Residual, Removed, "comp", all = TRUE)
total <- merge(Current, temp, "comp", all = TRUE)
total
#### Stocking Pond Calculator
# Call Dependencies and Set Working Directory to File Location
library(dplyr)
library(readxl)
library(caTools)
library(ggplot2)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Simple Calculation
## Read in Data - creates a tibble
simpleinput = read_excel("PondCalc.xlsx" )#, "Sheet1", col_types = numeric)
print(simpleinput)
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(simpleinput, Depth, Area)[order(simpleinput$Depth, decreasing= FALSE),])
WaterVol$RelDepth <- c(0, diff(WaterVol$Depth))# Calculates Relative depth
WaterVol$AvgArea <- runmean(WaterVol$Area,2) # Calculates Average of surface areas
WaterVol$Vol <- WaterVol$RelDepth * WaterVol$AvgArea
WaterVol
message("Pond Volume Is: " ,(sum(WaterVol$Vol)/43560), " Acre-Feet")
## Utility function to add relative depth to a data frame
add_vol <- function(depth_area_df) {
## Convert column names to lowercase
names(depth_area_df) <- tolower(names(depth_area_df))
pond_data <- depth_area_df %>% na.omit() %>% dplyr::select(depth, area) %>% dplyr::arrange(depth) %>% dplyr::mutate(reldepth=c(0, diff(depth)), avgarea=runmean(area,2), vol=reldepth*avgarea)
}
# Advanced Calculation
## Read in Data
AdvIinput = read_excel("PondCalcAdvanced.xlsx" )#, "Sheet1", col_types = numeric)
print(AdvIinput)
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(simpleinput, Depth, Area)[order(simpleinput$Depth, decreasing= FALSE),])
WaterVol$RelDepth <- c(0, diff(WaterVol$Depth)) # Calculates Relative depth
WaterVol$AvgArea <- runmean(WaterVol$Area,2) # Calculates Average of surface areas
WaterVol$Vol <- WaterVol$RelDepth * WaterVol$AvgArea
print(WaterVol)
# Sort Data Table by Island Depth. Drops Null rows, orders by size
IslandVol <- na.omit(select(AdvIinput, IslandDepth, IslandArea)[order(AdvIinput$IslandDepth, decreasing= FALSE),])
IslandVol$RelDepth <- c(0,diff(IslandVol$IslandDepth))
IslandVol$AvgArea <- runmean(IslandVol$IslandArea,2)
IslandVol$Vol <- IslandVol$RelDepth * IslandVol$AvgArea
print(IslandVol)
Vol<- sum(WaterVol$Vol,na.rm=T) - sum(IslandVol$Vol,na.rm=T)
message("Pond Volume with Island Is: " ,(Vol/43560), " Acre-Feet")
p<-ggplot(WaterVol, aes(x=Depth, y=Area, fill=Area)) +
geom_bar(stat="identity")+theme_minimal()
p + coord_flip() + theme(legend.position="none") + labs(x="Pond Depth (ft)", y = "Surface Area (ft^2)")
##### import libraries ----
library(shiny)
library(googlesheets)
library(shinythemes)
library(DT)
library(dplyr)
googleform_embed_link <- "https://docs.google.com/forms/d/e/1FAIpQLSeJmQXdP8wj391meoTIyWNL-KeVTmh_nmo3YkulVfd34XM_vA/viewform?embedded=true" # Reference Storage Sheet for Competitor Sign-ups
googleform_data_url <- "https://docs.google.com/spreadsheets/d/1cli9LgmMMR4DguPmipvMysQMkTZ4C0y9DNoPheDtkkw/pubhtml" # Caution. For some reason this only opens when using a web browser. Does not open on its own within the r console app.
googleform_download <- "https://docs.google.com/spreadsheets/u/1/d/1cli9LgmMMR4DguPmipvMysQMkTZ4C0y9DNoPheDtkkw/export?format=csv"
##### SERVER ----
# initiating the Server Functions
server <- function(input, output) {
#Function to generate nested Google Form for competitor fill-out
output$googleForm <- renderUI({
tags$iframe(id = "googleForm",
src = googleform_embed_link,
height = 1225,
width = 850,
frameborder = 0,
marginheight = 0)
})
ss <- gs_url(googleform_data_url, lookup = FALSE, visibility = "public")
output$googleFormData <- DT::renderDataTable({
input$refresh
ss_dat <- gs_read(ss) %>%
mutate(Timestamp = Timestamp %>%
as.POSIXct(format = "%m/%d/%Y %H:%M:%S", tz = "PST8PDT")) %>%
select('First and Last Name', Gender, 'Event Name', 'Individual Events', 'Double Buck', 'Jack and Jill') %>%
arrange(desc(Gender))
DT::datatable(ss_dat)
})
x <- rnorm(100)
y <- rnorm(100)
output$downloadRegistration <- downloadHandler(
filename = function() {
paste('Current Registration', ".csv", sep = "")
},
content = function(file) {
write.csv(ss, con)
}
)
output$plot <- renderPlot({
if (input$registrationType == "scatter") {
plot(x, y)
} else {
breaks <- input$breaks
if (breaks == "custom") {
breaks <- input$breakCount
}
hist(x, breaks = breaks)
}
})
}
##### USER INTERFACE ----
# initiating the UI
ui <- navbarPage( "Conclave Event Registration",
tabPanel("Event Registration", htmlOutput("googleForm")),
tabPanel("Verify Registration", DT::dataTableOutput("googleFormData"), actionButton("refresh", "Refresh Sheet"),
downloadButton("downloadRegistration", "Download Current Registration")
),
tabPanel("Schedule Events",
selectInput("scheduleInput",
"Select Which Registration Sheet to Use",
c('Existing Google Form' = "existing", 'Custom Input' = "custom")
),
conditionalPanel(
downloadButton("downlosadData", "Download Blank Registration Template"),
condition = "input.scheduleInput == 'custom'",
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
),
numericInput("obs", "Heats/Event:", 4, min = 1, max = 8),
verbatimTextOutput("value"),
actionButton("button", "Generate Schedule")
),
tabPanel("Calculate Scores",
# Select which data source to use
h2("Step 2:"),
selectInput("registrationType", "Upload/Select Final Competitor List:",
c(Google_Form = "scatter", Custom = "custom")
),
# Only show this panel if the plot type is a histogram
conditionalPanel(
condition = "input.registrationType == 'custom'",
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
),
# Button
downloadButton("downloadData", "Download")
),
mainPanel(
# plotOutput("plot")
)
)
shinyApp(ui, server)
library(shiny)
library(readxl)
library(caTools)
library(dplyr)
library(DT)
library(polynom)
library(ggplot2)
## Create a reactive values object that will store the data frame
## This object will be updated by three types of events
##   1) An Excel sheet uploaded
##   2) A new row added with the 'Add Row' button
##   3) A row deleted with the 'Delete Selected Row(s)' button
pond_data <- reactiveValues()
## Dont need to initialize actually
##pond_data$df <- data.frame(depth=NA, area=NA)[-1,]
## Utility function to add relative depth and volume to a data frame
add_vol <- function(depth_area_df, addzero=TRUE) {
## Convert column names to lowercase
names(depth_area_df) <- tolower(names(depth_area_df))
## Checks needed
##  - flag or automatically delete duplicate rows
##  - make sure there is a 0,0 row
##  - make sure that order(depth) and order(area) are the same
depth_area_plus <- depth_area_df %>% na.omit() %>% dplyr::select(depth, area) %>% dplyr::arrange(depth)
## Add the first 0-0 if needed
if (addzero) {
if (sum(depth_area_plus[1,]) != 0) {
depth_area_plus <- rbind(data.frame(depth=0, area=0), depth_area_plus)
}
}
## Add and return the data frame with the calculated columns
depth_area_plus %>% dplyr::mutate(reldepth=c(0, diff(depth)), avgarea=runmean(area,2), vol=reldepth*avgarea, totVol=cumsum(vol)/43560)
}
shinyServer(function(input, output, session) {
# Create an observe event connected to the ExcelUpload control
# Import the selected spreadsheet and replace the contents of
# pond_data$df with the contents
observe({
req(input$FileUpload)
excel_df <- read_excel(input$FileUpload$datapath, 1)
pond_data$df <- add_vol(excel_df)
})
## Create an observe event that will update the total volume when the calc_total_vol
## button is clicked
output$txt_total_vol <- renderText({ paste("Your pond has a volume of",
(sum(pond_data$df$vol)/43560),
" Acre-Feet")})
## Create an observe event that will update the current pond volume when the calc_current_vol
## button is clicked
observeEvent(input$calc_current_vol, {
## Calculate fit based on input current volume
req(input$CurrentDepth)
fit<- lm(totVol ~ poly(depth,3,raw = TRUE), data = pond_data$df)
qwe<-as.numeric(predict (fit,data.frame(depth = input$CurrentDepth)))
output$txt_current_vol <- renderText({ paste("Your pond has a volume of",
(as.numeric(qwe)),
" Acre-Feet")})
})
## Create an observeEvent function linked to the addrow action button
## that will update the data frame when a row is manually entered
observeEvent(input$AddRow, {
## Make sure there are values for PondDepth and PondSurface
req(input$PondDepth, input$PondSurface)
## Create data frame with the new depth and area
new_depth_area_df <- data.frame(depth=input$PondDepth, area=input$PondSurface)
if (is.null(pond_data$df)) {
pond_data$df <- add_vol(new_depth_area_df)
} else {
pond_data$df <- add_vol(pond_data$df %>% select(depth, area) %>% bind_rows(new_depth_area_df))
}
})
## Create an observeEvent function linked to the deleteRows action button
## that will update the data frame when a row is manually entered
observeEvent(input$DeleteRows,{
if (!is.null(input$PondMeasurement_rows_selected)) {
pond_data$df <- pond_data$df[-as.numeric(input$PondMeasurement_rows_selected),]
}
})
#output$tbl_populated <- eventReactive(pond_data$df, {
#  !is.null(pond_data$df)
#})
output$tbl_populated <- reactive({
!is.null(pond_data$df)
})
outputOptions(output, "tbl_populated", suspendWhenHidden = FALSE)
## Render the data table
output$PondMeasurement <- DT::renderDataTable({
req(pond_data$df)
DT::datatable(pond_data$df %>% dplyr::select(depth, area),
rownames = FALSE,
extensions = 'Buttons',
options = list(
paging = FALSE,
searching = FALSE,
dom = 'Bfrtip',
buttons = list(list(extend='copy'),
list(extend='csv'),
list(extend='excel',title=NULL, filename = 'Pond Volume Calculator'),
list(extend='print')))
)})
## Render the plot
output$PondDiagram <-renderPlot({
req(pond_data$df)
df <- data.frame("y"=pond_data$df$totVol, "x"=pond_data$df$depth)
my.formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(df, aes(x, y)) +
geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5) +
geom_smooth(method = "lm", se = FALSE,
formula = my.formula,
colour = "red") +
theme_minimal() +
coord_flip() +
theme(legend.position="none") +
labs(x="Pond Depth (ft)", y = "Volume at Depth (Acre-ft)", title = "Pond Curve")
})
})
runApp('PondCalc')
