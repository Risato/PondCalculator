isolate(values$df <- rbind(values$df, newLine))
}
})
# Converts Reactive Values to Table View
output$ManualInput <- renderTable({values$df})
newEntry <- observe({
if(input$calculate> 0) {
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(values$df, Depth, Area)[order(values$df$Depth, decreasing= FALSE),])
WaterVol$AvgDepth <-runmean(WaterVol$Depth,2)
WaterVol$AvgArea <- runmean(WaterVol$Area,2)
WaterVol$Vol <- WaterVol$AvgDepth * WaterVol$AvgArea
message("Pond Volume Is: " ,Result, " Acre-Feet")
Result <- sum(WaterVol$Vol)/43560
}
output$selected_var <- renderText({
"You have selected this"
})
})
}
))
library(shiny)
library(readxl)
library(caTools)
library(dplyr)
runApp(list(
ui=fluidPage(
titlePanel("Pond Calculator"
),
sidebarPanel(
h3("Step 1: (Optional)"),
fileInput('excelupload','Select Existing Pond Table',
accept = c(".xlsx")),
# ANDY: How do we get rid of this so that it automatically uploads?
actionButton("updatetest", "Confirm"),
h3("Step 2:"),
numericInput("PondDepth", "Add New Depth",NULL),
numericInput("PondSurface", "Add New Area",NULL),
actionButton("update", "Update Table"),
## Islands need to be added in the spreadsheet later
# h3("Step 3:"),
# numericInput("text1", "Add Island Depth",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
h3("Step 4:"),
actionButton("calculate", "Calculate Pond Volume")
),
mainPanel(
tableOutput("ManualInput"),
textOutput("Result"),
downloadButton("save", "Download")
)
),
server=function(input, output, session) {
# Create empty reactive values to receive manually added data
values <- reactiveValues()
values$df <- data.frame(Depth = NA, Area = NA)
# Upload XLSX into R Shiny App
mydata <- reactive({
inFile <- input$excelupload
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
})
# Creates Trigger to assign uploaded xlsx to dataframe
newEntry2 <- observe({
if(input$updatetest > 0) {
isolate(values$df<-rbind(values$df, mydata()))
}
})
# Creates Trigger to append manually declared data to reactive table
newEntry <- observe({
if(input$update > 0) {
newLine <- isolate(c(input$PondDepth, input$PondSurface))
isolate(values$df <- rbind(values$df, newLine))
}
})
# Converts Reactive Values to Table View
output$ManualInput <- renderTable({values$df})
newEntry <- observe({
if(input$calculate> 0) {
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(values$df, Depth, Area)[order(values$df$Depth, decreasing= FALSE),])
WaterVol$AvgDepth <-runmean(WaterVol$Depth,2)
WaterVol$AvgArea <- runmean(WaterVol$Area,2)
WaterVol$Vol <- WaterVol$AvgDepth * WaterVol$AvgArea
message("Pond Volume Is: " ,Result, " Acre-Feet")
Result <- sum(WaterVol$Vol)/43560
}
output$selected_var <- renderText({
"You have selected this"
})
})
}
))
library(shiny)
library(readxl)
library(caTools)
library(dplyr)
runApp(list(
ui=fluidPage(
titlePanel("Pond Calculator"
),
sidebarPanel(
h3("Step 1: (Optional)"),
fileInput('excelupload','Select Existing Pond Table',
accept = c(".xlsx")),
# ANDY: How do we get rid of this so that it automatically uploads?
actionButton("updatetest", "Confirm"),
h3("Step 2:"),
numericInput("PondDepth", "Add New Depth",NULL),
numericInput("PondSurface", "Add New Area",NULL),
actionButton("update", "Update Table"),
## Islands need to be added in the spreadsheet later
# h3("Step 3:"),
# numericInput("text1", "Add Island Depth",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
h3("Step 4:"),
actionButton("calculate", "Calculate Pond Volume")
),
mainPanel(
tableOutput("ManualInput"),
textOutput("Result"),
downloadButton("save", "Download")
)
),
server=function(input, output, session) {
# Create empty reactive values to receive manually added data
values <- reactiveValues()
values$df <- data.frame(Depth = NA, Area = NA)
# Upload XLSX into R Shiny App
mydata <- reactive({
inFile <- input$excelupload
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
})
# Creates Trigger to assign uploaded xlsx to dataframe
newEntry2 <- observe({
if(input$updatetest > 0) {
isolate(values$df<-rbind(values$df, mydata()))
}
})
# Creates Trigger to append manually declared data to reactive table
newEntry <- observe({
if(input$update > 0) {
newLine <- isolate(c(input$PondDepth, input$PondSurface))
isolate(values$df <- rbind(values$df, newLine))
}
})
# Converts Reactive Values to Table View
output$ManualInput <- renderTable({values$df})
newEntry <- observe({
if(input$calculate> 0) {
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(values$df, Depth, Area)[order(values$df$Depth, decreasing= FALSE),])
WaterVol$AvgDepth <-runmean(WaterVol$Depth,2)
WaterVol$AvgArea <- runmean(WaterVol$Area,2)
WaterVol$Vol <- WaterVol$AvgDepth * WaterVol$AvgArea
message("Pond Volume Is: " ,Result, " Acre-Feet")
Result <- sum(WaterVol$Vol)/43560
}
output$Result <- renderText({
"You have selected this"
})
})
}
))
library(shiny)
library(readxl)
library(caTools)
library(dplyr)
runApp(list(
ui=fluidPage(
titlePanel("Pond Calculator"
),
sidebarPanel(
h3("Step 1: (Optional)"),
fileInput('excelupload','Select Existing Pond Table',
accept = c(".xlsx")),
# ANDY: How do we get rid of this so that it automatically uploads?
actionButton("updatetest", "Confirm"),
h3("Step 2:"),
numericInput("PondDepth", "Add New Depth",NULL),
numericInput("PondSurface", "Add New Area",NULL),
actionButton("update", "Update Table"),
## Islands need to be added in the spreadsheet later
# h3("Step 3:"),
# numericInput("text1", "Add Island Depth",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
h3("Step 4:"),
actionButton("calculate", "Calculate Pond Volume")
),
mainPanel(
tableOutput("ManualInput"),
textOutput("Result"),
downloadButton("save", "Download")
)
),
server=function(input, output, session) {
# Create empty reactive values to receive manually added data
values <- reactiveValues()
values$df <- data.frame(Depth = NA, Area = NA)
# Upload XLSX into R Shiny App
mydata <- reactive({
inFile <- input$excelupload
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
})
# Creates Trigger to assign uploaded xlsx to dataframe
newEntry2 <- observe({
if(input$updatetest > 0) {
isolate(values$df<-rbind(values$df, mydata()))
}
})
# Creates Trigger to append manually declared data to reactive table
newEntry <- observe({
if(input$update > 0) {
newLine <- isolate(c(input$PondDepth, input$PondSurface))
isolate(values$df <- rbind(values$df, newLine))
}
})
# Converts Reactive Values to Table View
output$ManualInput <- renderTable({values$df})
newEntry <- observe({
if(input$calculate> 0) {
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(values$df, Depth, Area)[order(values$df$Depth, decreasing= FALSE),])
WaterVol$AvgDepth <-runmean(WaterVol$Depth,2)
WaterVol$AvgArea <- runmean(WaterVol$Area,2)
WaterVol$Vol <- WaterVol$AvgDepth * WaterVol$AvgArea
message("Pond Volume Is: " ,Result, " Acre-Feet")
Result <- sum(WaterVol$Vol)/43560
}
output$Result <- renderText({        "You have selected this"
})
})
}
))
library(shiny)
library(readxl)
library(caTools)
library(dplyr)
runApp(list(
ui=fluidPage(
titlePanel("Pond Calculator"
),
sidebarPanel(
h3("Step 1: (Optional)"),
fileInput('excelupload','Select Existing Pond Table',
accept = c(".xlsx")),
# ANDY: How do we get rid of this so that it automatically uploads?
actionButton("updatetest", "Confirm"),
h3("Step 2:"),
numericInput("PondDepth", "Add New Depth",NULL),
numericInput("PondSurface", "Add New Area",NULL),
actionButton("update", "Update Table"),
## Islands need to be added in the spreadsheet later
# h3("Step 3:"),
# numericInput("text1", "Add Island Depth",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
h3("Step 4:"),
actionButton("calculate", "Calculate Pond Volume")
),
mainPanel(
tableOutput("ManualInput"),
downloadButton("save", "Download")
)
),
server=function(input, output, session) {
# Create empty reactive values to receive manually added data
values <- reactiveValues()
values$df <- data.frame(Depth = NA, Area = NA)
# Upload XLSX into R Shiny App
mydata <- reactive({
inFile <- input$excelupload
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
})
# Creates Trigger to assign uploaded xlsx to dataframe
newEntry2 <- observe({
if(input$updatetest > 0) {
isolate(values$df<-rbind(values$df, mydata()))
}
})
# Creates Trigger to append manually declared data to reactive table
newEntry <- observe({
if(input$update > 0) {
newLine <- isolate(c(input$PondDepth, input$PondSurface))
isolate(values$df <- rbind(values$df, newLine))
}
})
# Converts Reactive Values to Table View
output$ManualInput <- renderTable({values$df})
newEntry <- observe({
if(input$calculate> 0) {
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(values$df, Depth, Area)[order(values$df$Depth, decreasing= FALSE),])
WaterVol$AvgDepth <-runmean(WaterVol$Depth,2)
WaterVol$AvgArea <- runmean(WaterVol$Area,2)
WaterVol$Vol <- WaterVol$AvgDepth * WaterVol$AvgArea
message("Pond Volume Is: " ,(sum(WaterVol$Vol)/43560), " Acre-Feet")
Result <- sum(WaterVol$Vol)/43560
}
})
}
))
library(shiny)
library(readxl)
library(caTools)
library(dplyr)
runApp(list(
ui=fluidPage(
titlePanel("Pond Calculator"
),
sidebarPanel(
h3("Step 1: (Optional)"),
fileInput('excelupload','Select Existing Pond Table',
accept = c(".xlsx")),
# ANDY: How do we get rid of this so that it automatically uploads?
actionButton("updatetest", "Confirm"),
h3("Step 2:"),
numericInput("PondDepth", "Add New Depth",NULL),
numericInput("PondSurface", "Add New Area",NULL),
actionButton("update", "Update Table"),
## Islands need to be added in the spreadsheet later
# h3("Step 3:"),
# numericInput("text1", "Add Island Depth",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
h3("Step 4:"),
actionButton("calculate", "Calculate Pond Volume")
),
mainPanel(
tableOutput("ManualInput"),
textOutput(Result),
downloadButton("save", "Download")
)
),
server=function(input, output, session) {
# Create empty reactive values to receive manually added data
values <- reactiveValues()
values$df <- data.frame(Depth = NA, Area = NA)
# Upload XLSX into R Shiny App
mydata <- reactive({
inFile <- input$excelupload
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
})
# Creates Trigger to assign uploaded xlsx to dataframe
newEntry2 <- observe({
if(input$updatetest > 0) {
isolate(values$df<-rbind(values$df, mydata()))
}
})
# Creates Trigger to append manually declared data to reactive table
newEntry <- observe({
if(input$update > 0) {
newLine <- isolate(c(input$PondDepth, input$PondSurface))
isolate(values$df <- rbind(values$df, newLine))
}
})
# Converts Reactive Values to Table View
output$ManualInput <- renderTable({values$df})
newEntry <- observe({
if(input$calculate> 0) {
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(values$df, Depth, Area)[order(values$df$Depth, decreasing= FALSE),])
WaterVol$AvgDepth <-runmean(WaterVol$Depth,2)
WaterVol$AvgArea <- runmean(WaterVol$Area,2)
WaterVol$Vol <- WaterVol$AvgDepth * WaterVol$AvgArea
message("Pond Volume Is: " ,(sum(WaterVol$Vol)/43560), " Acre-Feet")
Result <- sum(WaterVol$Vol)/43560
}
})
}
))
install.packages(c("digest", "fansi", "glue", "httpuv", "later", "openssl", "pkgconfig", "Rcpp", "RCurl", "rlang", "scales", "stringi", "tinytex", "xtable", "yaml"))
Here are the recently collected data from the Femmelschlagge study. The essence of the study is to get basic information on edge release alternatives, when it comes to releasing previously regenerated group selection. Questions are:
1. Can you effectively release suppressed trees on the edges of group selections? If so, for which species?
2. Is there a difference between releasing on north v. south edges?
3. Is it light availability increase that explains the release?
I did some parsing, to make sure the dbh and ht increments are matched up with old measurements.
I think the logical Y variables could be:
DBH, relative growth from 2013 to 2018 (post harvest)
HT, relative growth fro 2013 to 2013 (post harvest)
Change in %TTR (light availability)
Logical X variables are:
Spp
Row northness (cosine of the aspect from gap center)
Cut v. no cut
1, 2, v. 3 position (distance from edge; 1=0; 2=2m; 3=4m)
Or the light could be done separately, as an explanation of growth response if there is one
Or it could be done separately for each species.
Could also lump all of the 1, 2, 3 positions together. I have a complementary analysis done that says these are all within the edge zone. We'll have to account for spatial correlations somehow.
Maybe spend some time with this data, if you are still interested, and we can discuss an analysis plan of attack. Not sure how much you remember the layout and if you'll be able to interpret the data. The maps might help jog your memory. I can talk you through it if you have questions. I can also write a readme file to give detail on all the columns.
I'm pretty sure there is a paper in this somewhere.
Rob
library(readxl)
sd
c
zxc
v>d
my_data <- read.table(file = "clipboard",
sep = "\t", header=TRUE)
my_data <- read.table(file = "All Data_parsed.xls",
sep = "\t", header=TRUE)
my_data <- read.table(file = "/All Data_parsed.xls",
sep = "\t", header=TRUE)
my_data <- read.table(file = "\All Data_parsed.xls",
sep = "\t", header=TRUE)
my_data <- read.table(file = "\All Data_parsed.xls", sep = "\t", header=TRUE)
my_data <- read.table(file = "/All Data_parsed.xls", sep = "\t", header=TRUE)
my_data <- read.table(file = "/Data/All Data_parsed.xls", sep = "\t", header=TRUE)
my_data <- read.table(file = "/Data/All Data_parsed.xls", sep = "\t", header=TRUE)
my_data <- read.table(file = "/Data/All Data_parsed.xls", sep = "\t", header=TRUE)
my_data <- read.xlsx(file = "/Data/All Data_parsed.xls", sep = "\t", header=TRUE)
library(xlsx)
install.packages("xlsx")
library(xlsx)
my_data <- read.xlsx(file = "/Data/All Data_parsed.xls", sep = "\t", header=TRUE)
library(xlsx)
my_data <- read.xlsx(file = "/Data/All Data_parsed.xls", sep = "\t", header=TRUE)
my_data <- read_excel(file = "/Data/All Data_parsed.xls", sep = "\t", header=TRUE)
library(readxl)
my_data <- read_excel(file = "/Data/All Data_parsed.xls", sep = "\t", header=TRUE)
install.packages(c("backports", "BH", "broom", "callr", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "DT", "evaluate", "fansi", "ggplot2", "googledrive", "haven", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "markdown", "mime", "openssl", "packrat", "pillar", "processx", "ps", "purrr", "R6", "Rcpp", "readr", "readxl", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "shinythemes", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "xfun"))
install.packages(c("data.table", "dbplyr", "digest", "dplyr", "DT", "evaluate", "fansi", "ggplot2", "googledrive", "haven", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "markdown", "mime", "openssl", "packrat", "pillar", "processx", "ps", "purrr", "R6", "Rcpp", "readr", "readxl", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "shinythemes", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "xfun"))
library(shiny)
library(readxl)
runApp(list(
ui=fluidPage(
titlePanel("Pond Calculator"
),
sidebarPanel(
h3("Step 1:"),
fileInput('file1','Upload Existing Pond Table',
accept = c(".xlsx")),
h3("Step 2:"),
numericInput("text1", "Add New Depth",NULL),
numericInput("text2", "Add New Area",NULL),
actionButton("update", "Update Table"),
## Islands need to be added in the spreadsheet later now
# h3("Step 3:"),
# numericInput("text1", "Add Island Depth",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
h3("Step 4:"),
actionButton("calculate", "Calculate Pond Volume")
),
mainPanel(
tableOutput("table1"),
tableOutput("table"), # Temporary
downloadButton("save", "Download")
)
),
server=function(input, output, session) {
# Create Reactive values to manually add data
values <- reactiveValues()
values$df <- data.frame(Depth = NA, Area = NA)
newEntry <- observe({
if(input$update > 0) {
newLine <- isolate(c(input$text1, input$text2))
isolate(values$df <- rbind(values$df, newLine))
}
})
# Converts Reactive Values to Table View
output$table1 <- renderTable({values$df})
# Upload XLSX into reactive file
mydata <- reactive({
inFile <- input$file1
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
})
## Generate table from reactive upload
output$table <-renderTable({mydata()})
# Temporary Creates Table view of Uploaded File
output$contents <- renderTable({
inFile <- input$file1
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
})
}
))
shiny::runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
