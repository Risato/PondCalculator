plot(Pond_Done)
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$depth~Pond_Done$totVol)
plot(Pond_Done$totVol)
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
plot(Pond_Done$totVol)
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(Pond_Done, aes(y = totVol, x = depth)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(Pond_Done, aes(y = totVol, x = depth)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
plot(Pond_Done$totVol)
ggplot(Pond_Done, aes(y = totVol, x = depth)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(Pond_Done, aes(y = totVol, x = depth)) +
geom_point() +
geom_smooth(method = "lm", col = "red")
ggplot(Pond_Done, aes(y = totVol, x = depth)) +
geom_point() +
geom_smooth(method = "lm", col = "red")
ggplot(Pond_Done, aes(y = totVol, x = depth)) +
geom_point() +
stat_smooth(method = "auto", col = "red")
ggplot(Pond_Done, aes(y = totVol, x = depth)) +
geom_point() +
stat_smooth(method = "auto", col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "auto", col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "gam", col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "gam", col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "glm", col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "glm", col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "loess", col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "auto", col = "red")
plot(Pond_Done$totVol)
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "auto", col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
#second degree
fit2 <- lm(y~poly(x,2,raw=TRUE))
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "poly", col = "red")
plot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
fit
fit$model
#second degree
fit2 <- lm(y~poly(x,2,raw=TRUE))
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$depth~Pond_Done$totVol)
plot(lmTemp$residuals, pch = 16, col = "red")
plot(lmTemp$residuals, pch = 16, col = "red")
plot(Pond_Done$totVol, pch = 16, col = "red")
plot(Pond_Done$totVol, Pond_Done$depth, pch = 16, col = "red")
plot(Pond_Done$totVol)
plot(Pond_Done$totVol, Pond_Done$depth, pch = 16, col = "red")
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$depth~Pond_Done$totVol)
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$depth~poly(Pond_Done$totVol,2,raw = TRUE))
fit
plot(Pond_Done$totVol, Pond_Done$depth, pch = 16, col = "red")
mod <- lm(y ~ x); coef(mod)
mod <- lm(Pond_Done$depth~poly ~ Pond_Done$totVol); coef(mod)
mod <- lm(Pond_Done$depth~ Pond_Done$totVol); coef(mod)
mod
mod(2)
mod
mod <- lm(Pond_Done$depth~ Pond_Done$totVol); coef(mod)
mod
mod(2)
mod
call
call(2)
mod
call(mod)
call("mod")
mod
type(mod)
status(mod)
mod
library(ggplot2)
fit <- lm(mpg ~ hp + I(hp^2), data = mtcars)
prd <- data.frame(hp = seq(from = range(mtcars$hp)[1], to = range(mtcars$hp)[2], length.out = 100))
err <- predict(fit, newdata = prd, se.fit = TRUE)
prd$lci <- err$fit - 1.96 * err$se.fit
prd$fit <- err$fit
prd$uci <- err$fit + 1.96 * err$se.fit
ggplot(prd, aes(x = hp, y = fit)) +
theme_bw() +
geom_line() +
geom_smooth(aes(ymin = lci, ymax = uci), stat = "identity") +
geom_point(data = mtcars, aes(x = hp, y = mpg))
prd$fit <- err$fit
prd$fit
err
err
fit
fit(2)
Call(2)
fit(Call)
Call
fit()
fit
Call
fit$call
fit$call(2)
fit$call
type(fit)
status(fit)
type(fit)
typeof(fit)
(fit)
fit$coefficients <- y
fit$coefficients <- newdata
fit$coefficients <- mtcars
newpred <- predict(fit)
fit$coefficients <- mtcars
fit
library(ggplot2)
fit <- lm(mpg ~ hp + I(hp^2), data = mtcars)
prd <- data.frame(hp = seq(from = range(mtcars$hp)[1], to = range(mtcars$hp)[2], length.out = 100))
err <- predict(fit, newdata = prd, se.fit = TRUE)
prd$fit <- err$fit
prd$uci <- err$fit + 1.96 * err$se.fit
prd$lci <- err$fit - 1.96 * err$se.fit
ggplot(prd, aes(x = hp, y = fit)) +
theme_bw() +
geom_line() +
geom_smooth(aes(ymin = lci, ymax = uci), stat = "identity") +
geom_point(data = mtcars, aes(x = hp, y = mpg))
newpred <- predict(fit)
newpred
fit
a = c(1, 2, 5)
b = c(12, 15, 20)
model = lm(a~b)
model
formula = formula(model)
formula
coefficients(model)
as.formula(
paste0("y ~ ", round(coefficients(model)[1],2), " + ",
paste(sprintf("%.2f * %s",
coefficients(model)[-1],
names(coefficients(model)[-1])),
collapse=" + ")
)
)
test<- as.formula(
paste0("y ~ ", round(coefficients(model)[1],2), " + ",
paste(sprintf("%.2f * %s",
coefficients(model)[-1],
names(coefficients(model)[-1])),
collapse=" + ")
)
)
test
test(3)
value <- 4
value * coefficients(fit)
value * coefficients(fit)[1]
value * coefficients(fit)[1] + coefficients(fit)[2]
library(DT)
library(reshape2)
library(readxl)
add_vol <- function(depth_area_df, addzero=TRUE) {
## Convert column names to lowercase
names(depth_area_df) <- tolower(names(depth_area_df))
## Checks needed
##  - flag or automatically delete duplicate rows
##  - make sure there is a 0,0 row
##  - make sure that order(depth) and order(area) are the same
depth_area_plus <- depth_area_df %>% na.omit() %>% dplyr::select(depth, area) %>% dplyr::arrange(depth)
## Add the first 0-0 if needed
if (addzero) {
if (sum(depth_area_plus[1,]) != 0) {
depth_area_plus <- rbind(data.frame(depth=0, area=0), depth_area_plus)
}
}
## Add and return the data frame with the calculated columns
depth_area_plus %>% dplyr::mutate(reldepth=c(0, diff(depth)), avgarea=runmean(area,2), vol=reldepth*avgarea, totVol=cumsum(vol))
}
Pond_Done<- add_vol(PondCalc)
Pond_Done
output$PondDiagram <-renderPlot({
req(pond_data$df)
ggplot(pond_data$df, aes(x=depth, y=totVol, fill=area)) +
geom_point(stat="identity", position='stack') +
theme_minimal() +
coord_flip() +
theme(legend.position="none") +
labs(x="Pond Depth (ft)", y = "volume (ft^2)", title = "Pond Curve")
})
Pond_Done
lm(Pond_Done)
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$depth~poly(Pond_Done$totVol,2,raw = TRUE))
fit
plot(Pond_Done$totVol, Pond_Done$depth, pch = 16, col = "red")
summary(fit)
mod <- lm(Pond_Done$depth~ Pond_Done$totVol); coef(mod)
mod()
#fit first degree polynomial equation:
#fit  <- lm(Pond_Done$depth~poly(Pond_Done$totVol,2,raw = TRUE))
fit <- lm(Pond_Done$depth~ Pond_Done$totVol); coef(mod)
summary(fit)
plot(Pond_Done$totVol, Pond_Done$depth, pch = 16, col = "red")
fit
plot(Pond_Done$totVol, Pond_Done$depth, pch = 16, col = "red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
mod
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$depth~poly(Pond_Done$totVol,2,raw = TRUE))
fit
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "auto", col = "red")
plot(fit)
plot(fit)
predict (myfit, 4)
predict (fit, 4)
predict (fit, 2)
predict (fit, Pond_Done$depth = 2)
predict (fit, depth = 2)
predict (fit, newdata = (depth = 2))
predict (fit, newdata = data.frame(depth = 2))
fit
plot(fit)
predict (fit, newdata = data.frame(Pond_Donr$depth = 2))
predict (fit, newdata = data.frame(Pond_Done$depth = 2))
predict (fit, newdata = data.frame(Pond_Done$depth = "2"))
predict (fit, newdata = list(Pond_Done$depth = "2"))
predict (fit, newdata = list = "2")
predict (fit, newdata = 2)
predict (fit, newdata = "2")
predict (fit, newdata = 2)
predict (fit, 2)
pond_done
Pond_Done
lm(Pond_Done)
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$depth~poly(Pond_Done$totVol,2,raw = TRUE))
fit
predict (fit, newdata = [Pond_Done$depth = "2"])
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() +
stat_smooth(method = "auto", col = "red")
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2,10,20, labels=c("Ctl","Trt"))
weight <- c(ctl, trt)
weight
lm.D9 <- lm(weight ~ group)
weight
group <- gl(2,10,20, labels=c("Ctl","Trt"))
group
lm.D9 <- lm(weight ~ group)
And predict:
> predict(lm.D9, newdata=data.frame(group = c("Ctl", "Trt")))
predict (fit, newdata = data.frame(group = 2))
predict(fit, newdata = data.frame(group = 2))
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$depth~poly(Pond_Done$totVol,3,raw = TRUE))
fit
myfit = lm(y ~ x)
predict(fit, newdata = data.frame(group = 2))
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$totVol~poly(Pond_Done$depth,3,raw = TRUE))
fit
predict(fit, newdata = data.frame(group = 2))
predict(fit, newdata = 2)
Pond_Done
predict(fit, newdata = 5)
predict(fit, newdata = 5.5)
predict(fit)
predict(model, new.df)
fit<- lm(totVol ~ poly(depth,3,raw = TRUE), data - Pond_Done)
fit<- lm(totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done)
new.df <- data.frame(depth = 2)
predict (fit,new.df)
new.df <- data.frame(depth = 2)
new.df <- data.frame(depth = 4)
predict (fit,new.df)
new.df <- data.frame(depth = 2)
predict (fit,new.df)
new.df <- data.frame(depth = 1)
predict (fit,new.df)
new.df <- data.frame(depth = 1.5)
predict (fit,new.df)
new.df <- data.frame(depth = 0)
predict (fit,new.df)
new.df <- data.frame(depth = 0.5)
predict (fit,new.df)
predict (fit,new.df)
#fit first degree polynomial equation:
fit  <- lm(Pond_Done$totVol~poly(Pond_Done$depth,3,raw = TRUE))
p + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done),colour="red")
p + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done) colour="red")
p + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done))
p + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done)
p + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done ,colour="red")
p + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=Pond_Done$totVol ~ poly(Pond_Done$depth,3,raw = TRUE),colour="red")
p + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done,colour="red")
p<- p + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done,colour="red")
p
p<- p + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done,colour="red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done,colour="red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=Pond_Done$totVol ~ poly(Pond_Done$depth,3,raw = TRUE),colour="red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=Pond_Done$totVol ~ poly(Pond_Done$depth,3,raw = TRUE),colour="red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=x ~ poly(y,3,raw = TRUE),colour="red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +
geom_point() + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=x ~ poly(y,3,raw = TRUE),colour="red")
ggplot(Pond_Done, aes(x = totVol, y = depth)) +   geom_point() + stat_smooth(method="lm", se=TRUE, fill=NA,
formula=x ~ poly(y,3,raw = TRUE),colour="red")
library(polynom)
library(ggplot2)
install.packages("polynom")
df<- Pond_Done
df <- data.frame("x"=Pond_Done$totVol, "y"=Pond_Dont$depth)
df <- data.frame("x"=Pond_Done$totVol, "y"=Pond_Done$depth)
df
df <- data.frame("y"=Pond_Done$totVol, "x"=Pond_Done$depth)
df
Pond_Done
my.formula <- y ~ poly(x, 3, raw = TRUE)
p <- ggplot(df, aes(x, y))
p <- p + geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5)
p <- p + geom_smooth(method = "lm", se = FALSE,
formula = my.formula,
colour = "red")
m <- lm(my.formula, df)
my.eq <- as.character(signif(as.polynomial(coef(m)), 3))
label.text <- paste(gsub("x", "~italic(x)", my.eq, fixed = TRUE),
paste("italic(R)^2",
format(summary(m)$r.squared, digits = 2),
sep = "~`=`~"),
sep = "~~~~")
p
df <- data.frame("x"=Pond_Done$totVol, "y"=Pond_Done$depth)
df
my.formula <- y ~ poly(x, 3, raw = TRUE)
p <- ggplot(df, aes(x, y))
p <- p + geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5)
p <- p + geom_smooth(method = "lm", se = FALSE,
formula = my.formula,
colour = "red")
p
my.formula <- y ~ poly(x, 10, raw = TRUE)
p <- ggplot(df, aes(x, y))
p <- p + geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5)
p <- p + geom_smooth(method = "lm", se = FALSE,
formula = my.formula,
colour = "red")
p
my.formula <- y ~ poly(x, 3, raw = TRUE)
p <- ggplot(df, aes(x, y))
p <- p + geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5)
p <- p + geom_smooth(method = "lm", se = FALSE,
formula = my.formula,
colour = "red")
p
df
m <- lm(my.formula, df)
my.eq <- as.character(signif(as.polynomial(coef(m)), 3))
library(polynom)
library(ggplot2)
df <- data.frame("x"=Pond_Done$totVol, "y"=Pond_Done$depth)
df
my.formula <- y ~ poly(x, 3, raw = TRUE)
p <- ggplot(df, aes(x, y))
p <- p + geom_point(alpha=2/10, shape=21, fill="blue", colour="black", size=5)
p <- p + geom_smooth(method = "lm", se = FALSE,
formula = my.formula,
colour = "red")
p
m <- lm(my.formula, df)
my.eq <- as.character(signif(as.polynomial(coef(m)), 3))
label.text <- paste(gsub("x", "~italic(x)", my.eq, fixed = TRUE),
paste("italic(R)^2",
format(summary(m)$r.squared, digits = 2),
sep = "~`=`~"),
sep = "~~~~")
p + annotate(geom = "text", x = 0.2, y = 15000, label = label.text,
family = "serif", hjust = 0, parse = TRUE, size = 4)
p + annotate(geom = "text", label = label.text,
family = "serif", hjust = 0, parse = TRUE, size = 4)
p + annotate(geom = "text", x = 0, y = 0, label = label.text,
family = "serif", hjust = 0, parse = TRUE, size = 4)
p + annotate(geom = "text", x = 10, y = 0, label = label.text,
family = "serif", hjust = 0, parse = TRUE, size = 4)
p + annotate(geom = "text", x = 10, y = 0, label = label.text,
family = "serif", hjust = 0, parse = TRUE, size = 4)
p + annotate(geom = "text", x = 100, y = 0, label = label.text,
family = "serif", hjust = 0, parse = TRUE, size = 4)
p + annotate(geom = "text", x = 1000, y = 0, label = label.text,
family = "serif", hjust = 0, parse = TRUE, size = 4)
p + annotate(geom = "text", x = 2000, y = 0, label = label.text,
family = "serif", hjust = 0, parse = TRUE, size = 4)
p + annotate(geom = "text", x = 1000, y = 0, label = label.text,
family = "serif", hjust = 0, parse = TRUE, size = 4)
runApp('GitHub/PondCalculator/PondCalc')
warnings()
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
fit<- lm(totVol ~ poly(depth,3,raw = TRUE), data = Pond_Done)
new.df <- data.frame(depth = 0.5)
predict (fit,new.df)
predict (fit,new.df)[1]
qwe<-predict (fit,new.df)[1]
qwe
type(qwe)
typeof(qwe)
qwe<-predict (fit,new.df)01]
qwe<-predict (fit,new.df)[0]
typeof(qwe)
qwe
qwe
qwe<-predict (fit,new.df)[2]
qwe
qwe<-predict (fit,new.df)[1]
qwe
qwe<-predict (fit,new.df)
qwe
typeof(qwe)
qwe<-predict(fit,new.df)
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
qwe
as.numeric(qwe)
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
runApp('GitHub/PondCalculator/PondCalc')
predict (fit,data.frame(depth = 0.5))
predict (fit,data.frame(depth = 0.5))
predict (fit,data.frame(depth = 0.5))
as.numeric(predict (fit,data.frame(depth = 0.5)))
qwe<- as.numeric(predict (fit,data.frame(depth = 0.5)))
qwe
qwe<- as.numeric(predict (fit,data.frame(depth = 0.5)))[1]
qwe
qwe<-as.numeric(predict (fit,data.frame(depth = input$CurrentDepth)))
## Calculate fit based on input current volume
req(input$CurrentDepth)
fit<- lm(totVol ~ poly(depth,3,raw = TRUE), data = pond_data)
qwe<-as.numeric(predict (fit,data.frame(depth = input$CurrentDepth)))
output$txt_current_vol <- renderText({ paste("Your pond has a volume of",
(as.numeric(qwe)),
" Acre-Feet")})
runApp('GitHub/PondCalculator/PondCalc')
Pond_Done
Pond_Done$df
Pond_Done$Df
Pond_Done$df
runApp('GitHub/PondCalculator/PondCalc')
