output$PondMeasurement <- DT::renderDataTable(
DT::datatable(values$df,
rownames = FALSE,
extensions = 'Buttons',
options = list(
paging = FALSE,
searching = FALSE,
dom = 'Bfrtip',
buttons = list('copy', 'csv', 'excel', 'pdf', 'print'))
))
newEntry <- observe({
if(input$calculate> 0) {
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(values$df, Depth, Area)[order(values$df$Depth, decreasing= FALSE),])
WaterVol$RelDepth <- c(0, diff(WaterVol$Depth))# Calculates Relative depth
WaterVol$AvgArea <- runmean(WaterVol$Area,2) # Calculates Average of surface areas
WaterVol$Vol <- WaterVol$RelDepth * WaterVol$AvgArea
output$selected_var <- renderText({ paste("Your pond has a volume of",(sum(WaterVol$Vol)/43560), " Acre-Feet")
})
}
})
}
shinyApp(ui = ui, server = server)
runApp('PondCalc')
library(shiny)
ui <- shinyUI(fluidPage(
titlePanel("Old Faithful Geyser Data"),
fluidRow(
column(2,
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
style="overflow-x: scroll; overflow-y: scroll"),
column(8,
plotOutput("distPlot")),
column(2,
textInput("test", "Test"),
style="overflow-x: scroll; overflow-y: scroll")
)
))
server <- shinyServer(function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
shinyApp(
ui = fluidPage(
tabsetPanel(
tabPanel("Map", fluid = TRUE,
sidebarLayout(
sidebarPanel(selectInput("Country", "Select Country", choices = "", selected = "")),
mainPanel(
htmlOutput("Attacks")
)
)
),
tabPanel("plot", fluid = TRUE,
sidebarLayout(
sidebarPanel(sliderInput("year", "Year:", min = 1968, max = 2009, value = 2009, sep='')),
mainPanel(fluidRow(
column(7,  plotlyOutput("")),
column(5, plotlyOutput(""))
)
)
)
)
)
),
server = function(input, output) {
}
)
install.packages(plotly)
install.packages("plotly")
library(shiny)
library(plotly)
shinyApp(
ui = fluidPage(
tabsetPanel(
tabPanel("Map", fluid = TRUE,
sidebarLayout(
sidebarPanel(selectInput("Country", "Select Country", choices = "", selected = "")),
mainPanel(
htmlOutput("Attacks")
)
)
),
tabPanel("plot", fluid = TRUE,
sidebarLayout(
sidebarPanel(sliderInput("year", "Year:", min = 1968, max = 2009, value = 2009, sep='')),
mainPanel(fluidRow(
column(7,  plotlyOutput("")),
column(5, plotlyOutput(""))
)
)
)
)
)
),
server = function(input, output) {
}
)
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(readxl)
library(caTools)
# library(dplyr, warn.conflicts = FALSE)
# library(DT, warn.conflicts = FALSE)
library(dplyr)
library(DT)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
titlePanel("Pond Calculator"),
p("Use this Pond Calculator to assist with measurement of your stock pond volumes. Enter your depths and associated surface area with the provided template or using the text boxes below. To save your data, download your table as a csv or xlsx file after you have generated the table."),
sidebarPanel(
h3("Step 1", align="Left"),
fileInput('excelupload', 'Upload Existing Pond Table', accept = c(".xlsx")),
p("OR", align="Center"),
numericInput("PondDepth", "Add New Pond Depth (Feet)",NULL),
p("and", align="Center"),
numericInput("PondSurface", "Pond Surface Area (Square-Feet)",NULL),
actionButton("update", "Add new Entry"),
## Islands need to be added in the spreadsheet later
h3("Step 3", align="Left"),
p("Under Development: Add Islands"),
# numericInput("text1", "Add Island Depth",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
h3("Step 4", align="Left"),
p("Under Development Select incorrect rows from the table on the right and click on the button below"),
actionButton("deleteRows", "Remove Selected Rows"),
h3("Step 5", align = "Left"),
actionButton("calculate", "Calculate Pond Volume")
# Maybe add this visualization: https://shiny.rstudio.com/gallery/plot-interaction-exclude.html
# Need to talk to range guys to see what they want. lm plot may be overkill
),
mainPanel(
DT::dataTableOutput('PondMeasurement'),
span(textOutput("selected_var"), style="color:red")
)
)
)
runApp('PondCalc')
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(readxl)
library(caTools)
# library(dplyr, warn.conflicts = FALSE)
# library(DT, warn.conflicts = FALSE)
library(dplyr)
library(DT)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
titlePanel("Pond Calculator"),
p("Use this Pond Calculator to assist with measurement of your stock pond volumes. Enter your depths and associated surface area with the provided template or using the text boxes below. To save your data, download your table as a csv or xlsx file after you have generated the table."),
sidebarPanel(
h3("Step 1", align="Left"),
fileInput('excelupload', 'Upload Existing Pond Table', accept = c(".xlsx")),
p("OR", align="Center"),
numericInput("PondDepth", "Add New Pond Depth (Feet)",NULL),
p("and", align="Center"),
numericInput("PondSurface", "Pond Surface Area (Square-Feet)",NULL),
actionButton("update", "Add new Entry"),
## Islands need to be added in the spreadsheet later
h3("Step 3", align="Left"),
p("Under Development: Add Islands"),
# numericInput("text1", "Add Island Depth",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
h3("Step 4", align="Left"),
p("Under Development Select incorrect rows from the table on the right and click on the button below"),
actionButton("deleteRows", "Remove Selected Rows"),
h3("Step 5", align = "Left"),
actionButton("calculate", "Calculate Pond Volume")
# Maybe add this visualization: https://shiny.rstudio.com/gallery/plot-interaction-exclude.html
# Need to talk to range guys to see what they want. lm plot may be overkill
),
mainPanel(
tabsetPanel(
tabPanel("Table", DT::dataTableOutput('PondMeasurement'),
span(textOutput("selected_var"), style="color:red")),
tabPanel("Plot_UnderDev")
)
),
mainPanel(
)
)
)
runApp('PondCalc')
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(readxl)
library(caTools)
# library(dplyr, warn.conflicts = FALSE)
# library(DT, warn.conflicts = FALSE)
library(dplyr)
library(DT)
library(ggplot2)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
titlePanel("Pond Calculator"),
p("Use this Pond Calculator to assist with measurement of your stock pond volumes. Enter your depths and associated surface area with the provided template or using the text boxes below. To save your data, download your table as a csv or xlsx file after you have generated the table."),
sidebarPanel(
fileInput('excelupload', '1) Upload Existing Pond Table', accept = c(".xlsx")),
helpText("(Optional) Pond Depth (Feet)", align="Left"),
numericInput("PondDepth", NULL,NULL),
helpText("(Optional) Pond Surface Area (Square-Feet)", align="Left"),
numericInput("PondSurface", NULL,NULL),
actionButton("update", "Add New Entry"),
## Islands need to be added in the spreadsheet later
hr(),
# helpText("Add Island Depth", align="Left"),
numericInput("text1", "2) Under Development",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
hr(),
h6("Step 3", align = "Left"),
actionButton("calculate", "Calculate Pond Volume")
# Maybe add this visualization: https://shiny.rstudio.com/gallery/plot-interaction-exclude.html
# Need to talk to range guys to see what they want. lm plot may be overkill
),
mainPanel(
fluidRow(
column(width = 6,
#h4("Pond Table", align = "center"),
DT::dataTableOutput('PondMeasurement'),
span(textOutput("selected_var"), style="color:red")
),
column(width = 6,
#h4("Bar plot", align = "Center"),
p("Coming Soon"),
plotOutput("scatterplot", height = 350,
dblclick = "scatterplot_dblclick",
click = "table_or_click",
brush = brushOpts(
id = "scatterplot_brush",
resetOnNew = TRUE
)
)
)
),
helpText("To zoom: Click, drag, and double click to zoom into the scatter plot. Double click to zoom back out to original extent."),
helpText("To identify points: Click on or near point(s). Data table below will be populated."),
hr(),
br(),
h3("Step 3", align="Left"),
p("Select incorrect rows from the table on the right and click on the button below"),
actionButton("deleteRows", "Remove Selected Rows"),
h2("Data Table")
)
)
)
runApp('PondCalc')
runApp('PondCalc')
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(readxl)
library(caTools)
# library(dplyr, warn.conflicts = FALSE)
# library(DT, warn.conflicts = FALSE)
library(dplyr)
library(DT)
library(ggplot2)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
titlePanel("Pond Calculator"),
p("Use this Pond Calculator to assist with measurement of your stock pond volumes. Enter your depths and associated surface area with the provided template or using the text boxes below. To save your data, download your table as a csv or xlsx file after you have generated the table."),
sidebarPanel(
fileInput('excelupload', '1) Upload Existing Pond Table', accept = c(".xlsx")),
helpText("(Optional) Pond Depth (Feet)", align="Left"),
numericInput("PondDepth", NULL,NULL),
helpText("(Optional) Pond Surface Area (Square-Feet)", align="Left"),
numericInput("PondSurface", NULL,NULL),
actionButton("update", "Add New Entry"),
## Islands need to be added in the spreadsheet later
hr(),
# helpText("Add Island Depth", align="Left"),
numericInput("text1", "2) Under Development",NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
hr(),
h6("3) Calculate Pond Volume", align = "Left"),
actionButton("calculate", "Calculate")
# Maybe add this visualization: https://shiny.rstudio.com/gallery/plot-interaction-exclude.html
# Need to talk to range guys to see what they want. lm plot may be overkill
),
mainPanel(
fluidRow(
column(width = 6,
#h4("Pond Table", align = "center"),
DT::dataTableOutput('PondMeasurement')
),
column(width = 6,
#h4("Bar plot", align = "Center"),
span(textOutput("selected_var"), style="color:red"),
plotOutput("scatterplot", height = 350,
dblclick = "scatterplot_dblclick",
click = "table_or_click",
brush = brushOpts(
id = "scatterplot_brush",
resetOnNew = TRUE
)
)
)
),
helpText("Select incorrect rows from the table on the right and click on the button belowTo zoom: Click, drag, and double click to zoom into the scatter plot. Double click to zoom back out to original extent."),
helpText("To identify points: Click on or near point(s). Data table below will be populated."),
div(style="display:inline-block",actionButton("deleteRows", "Remove Selected Rows"), style="float:right"),
)
)
)
runApp('PondCalc')
geom_bar(stat="bin", width=0.7, fill="steelblue")
theme_minimal()
Vol
WaterVol
p<-ggplot(WaterVol, aes(x=Area, y=Depth, fill=dose)) +
geom_bar(stat="identity")+theme_minimal()
p
p<-ggplot(WaterVol, aes(x=Area, y=Depth, fill=Area)) +
geom_bar(stat="identity")+theme_minimal()
p
p + coord_flip()
p<-ggplot(WaterVol, aes(x=Depth, y=Area, fill=Area)) +
geom_bar(stat="identity")+theme_minimal()
p
p + coord_flip()
p + coord_flip() + theme(legend.position="none")
p + coord_flip() + theme(legend.position="none") +
theme_minimal()
p + coord_flip() + theme(legend.position="none") + theme_minimal()
p + coord_flip() + theme(legend.position="none")
p + coord_flip() + theme_minimal(legend.position="none")
p<-ggplot(WaterVol, aes(x=Depth, y=Area, fill=Area)) +
geom_bar(stat="identity")+theme_minimal()
p + coord_flip() + theme_minimal(legend.position="none")
p + coord_flip() + theme(legend.position="none")
p<-ggplot(WaterVol, aes(x=Depth, y=Area, fill=Area)) +
geom_bar(stat="identity")+theme_minimal()
p + coord_flip() + theme(legend.position="none") + labs(x="Pond Depth (ft)", y = "Surface Area (ft^2)")
runApp('PondCalc')
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(readxl)
library(caTools)
# library(dplyr, warn.conflicts = FALSE)
# library(DT, warn.conflicts = FALSE)
library(dplyr)
library(DT)
# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
# Create empty reactive values to receive manually added data
values <- reactiveValues()
values$df <- data.frame(Depth = NA, Area = NA)
Result<-0.0
# Upload XLSX into R Shiny App
mydata <- reactive({
inFile <- input$excelupload
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
})
# Creates Trigger to assign uploaded xlsx to dataframe
newEntry4 <- observe({
if(is.null(input$excelupload) == FALSE) {
isolate(values$df<-rbind(values$df, mydata()))
}
})
observeEvent(input$deleteRows,{
if (!is.null(input$PondMeasurement_rows_selected)) {
values$df <- values$df[-as.numeric(input$PondMeasurement_rows_selected),]
}
})
# Creates Trigger to append manually declared data to reactive table
newEntry <- observe({
if(input$update > 0) {
newLine <- isolate(c(input$PondDepth, input$PondSurface))
isolate(values$df <- rbind(values$df, newLine))
}
})
# Converts Reactive Values to Table View
output$PondMeasurement <- DT::renderDataTable(
DT::datatable(values$df,
rownames = FALSE,
extensions = 'Buttons',
options = list(
paging = FALSE,
searching = FALSE,
dom = 'Bfrtip',
buttons = list('copy', 'csv', 'excel', 'pdf', 'print'))
))
newEntry <- observe({
if(input$calculate> 0) {
##Sort Data Table by Water Depth. Drops Null rows, orders by size
WaterVol <- na.omit(select(values$df, Depth, Area)[order(values$df$Depth, decreasing= FALSE),])
WaterVol$RelDepth <- c(0, diff(WaterVol$Depth))# Calculates Relative depth
WaterVol$AvgArea <- runmean(WaterVol$Area,2) # Calculates Average of surface areas
WaterVol$Vol <- WaterVol$RelDepth * WaterVol$AvgArea
output$selected_var <- renderText({ paste("Your pond has a volume of",(sum(WaterVol$Vol)/43560), " Acre-Feet")
})
}
})
output$PondDiagram <-renderPlot({
ggplot(WaterVol, aes(x=Depth, y=Area, fill=Area)) +geom_bar(stat="identity")+theme_minimal()})
})
runApp('PondCalc')
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(readxl)
library(caTools)
# library(dplyr, warn.conflicts = FALSE)
# library(DT, warn.conflicts = FALSE)
library(dplyr)
library(DT)
library(ggplot2)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
titlePanel("Pond Calculator"),
p("Use this Pond Calculator to assist with measurement of your stock pond volumes. Enter your depths and associated surface area with the provided template or using the text boxes below. To save your data, download your table as a csv or xlsx file after you have generated the table."),
sidebarPanel(
h4('Step 1: Upload Existing Pond Table'),
fileInput('excelupload', NULL, accept = c(".xlsx")),
helpText("(Optional) Pond Depth (Feet)", align="Left"),
numericInput("PondDepth", NULL,NULL),
helpText("(Optional) Pond Surface Area (Square-Feet)", align="Left"),
numericInput("PondSurface", NULL,NULL),
actionButton("update", "Add New Entry"),
## Islands need to be added in the spreadsheet later
hr(),
h4('Step 2: Add Island Depth'),
helpText("Under Development", align="Left"),
numericInput("text1", NULL, NULL),
# numericInput("text2", "Add IslandArea",NULL),
# actionButton("update", "Update Table"),
hr(),
h4("Step 3: Calculate Pond Volume", align = "Left"),
actionButton("calculate", "Calculate")
# Maybe add this visualization: https://shiny.rstudio.com/gallery/plot-interaction-exclude.html
# Need to talk to range guys to see what they want. lm plot may be overkill
),
mainPanel(
fluidRow(
column(width = 6,
#h4("Pond Table", align = "center"),
DT::dataTableOutput('PondMeasurement')
),
column(width = 6,
#h4("Bar plot", align = "Center"),
span(textOutput("selected_var"), style="color:red"),
plotOutput("PondDiagram")
)
),
helpText("If there is incorrect data, remove the rows before calculating."),
helpText("CLICK ONCE on each row containing incorrect information, then click on the 'Remove Selected Rows' button below."),
actionButton("deleteRows", "Remove Selected Rows")
)
)
)
runApp('PondCalc')
runApp('PondCalc')
runApp('PondCalc')
runApp('PondCalc')
